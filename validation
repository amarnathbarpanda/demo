const bcrypt = require('bcrypt');
const Multer = require('multer');
const storageOptions = Multer.diskStorage({
    destination : function(req,file,cb) {
        cb(null, './uploads')
    },
    filename : function(req,file,cb) {
        cb(null, file.originalname);
    }
})

const fileFilter = (req,file,cb) => {
    if(file.mimetype === 'image/jpeg' || file.mimetype === 'image/png'){
        cb(null, true);
    }
    else {
        cb(null, false);
    }
}
class Utils{
    multer = Multer({storage : storageOptions, fileFilter : fileFilter});
    static encryptPassword(password){
        return new Promise((resolve, reject) => {
            bcrypt.hash(password, 10, (err, hash) => {
                if(err){
                    reject(err);
                }
                else{
                    resolve(hash);
                }
            })
        })
    }

    static comparePassword(password){
        return new Promise((resolve, reject) => {
            bcrypt.compare(password.plainPassword, password.encryptedPassword,(err, isSame)=>{
                if(err){
                    reject(err);
                }
                else if(!isSame){
                    reject(new Error('password does not match'))
                }
                else {
                    resolve(true);
                }
            })
        })
    }

 
}

module.exports = Utils;
